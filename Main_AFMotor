int trigPin = 5; // 초음파센서 HC-SRO4 Trig 연결
int echoPin = 4; // "" Echo 연결

int speakerpin = 8; // 부저 핀 설정

#include <AFMotor.h> // L293D 모터쉴드 라이브러리 별도의 다운로드 필요
#include <SoftwareSerial.h> // 블루투스 통신을 위한 기본 해더 파일

//SoftwareSerial PhoneBT(2, 3); // 블루투스 통신 및 아두이노 통신 연결 TX = 2, RX = 3
/* 아두이노 메가는 별도의 설정 필요 없음 TX = 19, RX = 18
* 블루투스 비밀번호 : 1597
*/

// 모터의 전후좌우 방향을 컨트룰하는 PIN 번호 선언
AF_DCMotor MOTOR1(1); // 모터쉴드 M1 지정
AF_DCMotor MOTOR2(2); // 모터쉴드 M2 지정
AF_DCMotor MOTOR3(3); // 모터쉴드 M3 지정
AF_DCMotor MOTOR4(4); // 모터쉴드 M4 지정
#define ActionTime 3000
/* for (i-0; i < 255; i++) {
 *  motor.setSpeed(i);
 *  delay(20);
 *  }
 */

 void Stop_Release(){ // 멈춤 릴리스 선언
  MOTOR1.run(RELEASE);
  MOTOR2.run(RELEASE);
  MOTOR3.run(RELEASE);
  MOTOR4.run(RELEASE);
  delay(20);
 }

 void Go_Forward(){ // 전진 선언
  MOTOR1.run(FORWARD);
  MOTOR2.run(FORWARD);
  MOTOR3.run(FORWARD);
  MOTOR4.run(FORWARD);
  delay(20);
 }

 void Go_Backward(){ // 후진선전
  MOTOR1.run(BACKWARD);
  MOTOR2.run(BACKWARD);
  MOTOR3.run(BACKWARD);
  MOTOR4.run(BACKWARD);
  delay(20);
 }

void Go_Left(){ // 좌회전 선언
  MOTOR1.run(FORWARD);
  MOTOR2.run(BACKWARD);
  MOTOR3.run(BACKWARD);
  MOTOR4.run(FORWARD);
  delay(20);
}

void Go_Right(){ // 우회전 선언
  MOTOR1.run(BACKWARD);
  MOTOR2.run(FORWARD);
  MOTOR3.run(FORWARD);
  MOTOR4.run(BACKWARD);
  delay(20);
}

void Warning_Sound(){ // 삐-삐 소리 나는 경고음
  digitalWrite(speakerpin, HIGH);
  delay(500);
  digitalWrite(speakerpin, LOW);
  delay(500);
}

void Emergency_Stop(){ // 긴급 정지 소리 + 멈춤
  MOTOR1.run(RELEASE);
  MOTOR2.run(RELEASE);
  MOTOR3.run(RELEASE);
  MOTOR4.run(RELEASE);
  digitalWrite(speakerpin, HIGH);
  delay(20);
}

void setup(){ 
  PhoneBT.begin(9600); // 블루투스와 통신하기 위한 속도설정 ( 모듈의 속도를 확인 필요 )
  Serial.begin(9600); // 시리얼 통신 속도를 설정
  MOTOR1.setSpeed(250);
  MOTOR2.setSpeed(250);
  MOTOR3.setSpeed(250);
  MOTOR4.setSpeed(250);
  pinMode(trigPin, OUTPUT); // 초음파센서의 값을 초기화
  pinMode(echoPin, INPUT); // 초음파센서의 값을 초기화
  Serial.begin(9600);
  pinMode(BUZZER_PIN, OUTPUT); // 부저의 값을 초기화
}

void loop(){
  while(PhoneBT.available()){ // 블루투스 신호가 연결되었을대 작동되는 루틴
    char car = (car)PhoneBT.read(); // 블루투스로 읽은 값을 char 타입 변수로 저장
    Serial.print(car); // car 변수에 저장된 내용을 사용자가 '시리얼모니터'로 확인
    if(car == 'F'){
      Serial.println("forward 전진");
      Go_Forward();
    }
    else if(car == 'B'){
      Serial.println("Backward 후진");
      Go_Backward();
    }
    else if(car == 'L'){
      Serial.println("Leftward 좌회전");
      Go_Left();
    }
    else if(car == 'R'){
      Serial.println("Rightward 우회전");
      Go_Right();
    }
    else if(car == 'S'){
      Serial.println("Stop 정지");
      Stop_Release();
    }
  }

  float duration, distance;

  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10); // 10μs만 HIGH 유지
  digitalWrite(trigPin, LOW);

  digitalWrite(speakerpin, LOW);
  digitalWrite(trigPin, HIGH); // 초음파를 보낸 후 echopin 이 HIGH 상태로 대기
  delay(20);
  digitalWrite(trigPin, LOW);

  duration = pulseIn(echoPin, HIGH);
  distance = ((float)340 * duration) / 10000 / 2; // cm 단위 // 초음파의 속도 340, 밀리센컨드에서 세컨드로 10000 초음파가 나갔다가 들어오는 거리이므로 2를 나눔

  if(distance<13){ // 거리가 13 이하일경우 경고 사운드
    Serial.println("Warning 경고");
    Warning_Sound();
  }
  else if(distance<7){ // 거리가 7 이하일경우 사운드 및 멈춤
    Serial.println("Emergency Stop 긴급제동");
    Emergency_Stop();
  }
delay(500);
}
